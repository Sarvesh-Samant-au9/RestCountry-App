[{"F:\\Downloads\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\index.js":"1","F:\\Downloads\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\App.js":"2","F:\\Downloads\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\Components\\EachCountry.js":"3","F:\\Downloads\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\Components\\AllCountry.js":"4","C:\\Users\\Sarvesh\\Desktop\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\index.js":"5","C:\\Users\\Sarvesh\\Desktop\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\App.js":"6","C:\\Users\\Sarvesh\\Desktop\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\Components\\AllCountry.js":"7","C:\\Users\\Sarvesh\\Desktop\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\Components\\EachCountry.js":"8","C:\\Users\\Sarvesh\\Desktop\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\Components\\CountryByCode.js":"9","C:\\Users\\Sarvesh\\Desktop\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\Components\\TabsInfo.js":"10","C:\\Users\\Sarvesh\\Desktop\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\Components\\NavBar\\Navbar.js":"11","C:\\Users\\Sarvesh\\Desktop\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\Components\\Navbar\\Navbar.js":"12","C:\\Users\\Sarvesh\\Desktop\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\Components\\Region\\Asia.js":"13","C:\\Users\\Sarvesh\\Desktop\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\Components\\ChartsExp.js":"14","C:\\Users\\Sarvesh\\Desktop\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\Components\\LandChart.js":"15","C:\\Users\\Sarvesh\\Desktop\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\Components\\TabsInfoByCode.js":"16","C:\\Users\\Sarvesh\\Desktop\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\Components\\Weather.js":"17"},{"size":198,"mtime":1608034212637,"results":"18","hashOfConfig":"19"},{"size":852,"mtime":1608037128480,"results":"20","hashOfConfig":"19"},{"size":898,"mtime":1608036611355,"results":"21","hashOfConfig":"19"},{"size":415,"mtime":1608036297176,"results":"22","hashOfConfig":"19"},{"size":720,"mtime":1609185087462,"results":"23","hashOfConfig":"24"},{"size":6858,"mtime":1609567646956,"results":"25","hashOfConfig":"24"},{"size":3505,"mtime":1609185024622,"results":"26","hashOfConfig":"24"},{"size":2986,"mtime":1609581896078,"results":"27","hashOfConfig":"24"},{"size":3415,"mtime":1609581912253,"results":"28","hashOfConfig":"24"},{"size":7918,"mtime":1609571232254,"results":"29","hashOfConfig":"24"},{"size":1822,"mtime":1608752669644,"results":"30","hashOfConfig":"24"},{"size":2615,"mtime":1609567236092,"results":"31","hashOfConfig":"24"},{"size":4196,"mtime":1609569144025,"results":"32","hashOfConfig":"24"},{"size":984,"mtime":1609504911498,"results":"33","hashOfConfig":"24"},{"size":830,"mtime":1609442387330,"results":"34","hashOfConfig":"24"},{"size":3623,"mtime":1609444716147,"results":"35","hashOfConfig":"24"},{"size":4898,"mtime":1609609225936,"results":"36","hashOfConfig":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1wvy8et",{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"yp7bnu",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"49"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"49"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"49"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},"F:\\Downloads\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\index.js",[],"F:\\Downloads\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\App.js",["79"],"F:\\Downloads\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\Components\\EachCountry.js",["80"],"import React, { Component } from \"react\";\r\n\r\nexport class EachCountry extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"py-5\">\r\n          <div className=\"container\">\r\n            <div className=\"row hidden-md-up\">\r\n              <div className=\"col-md-4\">\r\n                <div className=\"card py-2\">\r\n                  <img\r\n                    className=\"card-img-top\"\r\n                    src=\"...\"\r\n                    alt=\"Card image cap\"\r\n                    style={{ width: \"10rem\" }}\r\n                  />\r\n                  <div className=\"card-body\">\r\n                    <p className=\"card-text\">\r\n                      {this.props.name.name}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EachCountry;\r\n",["81","82"],"F:\\Downloads\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\Components\\AllCountry.js",[],"C:\\Users\\Sarvesh\\Desktop\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\index.js",[],["83","84"],"C:\\Users\\Sarvesh\\Desktop\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\App.js",[],"C:\\Users\\Sarvesh\\Desktop\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\Components\\AllCountry.js",[],"C:\\Users\\Sarvesh\\Desktop\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\Components\\EachCountry.js",[],"C:\\Users\\Sarvesh\\Desktop\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\Components\\CountryByCode.js",["85"],"import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport TabsInfo from \"../Components/TabsInfo\";\r\nimport TabsInfoByCode from \"./TabsInfoByCode\";\r\nexport class CountryByCode extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // console.log(props, \"This Are Props\");\r\n    // console.log(this.props.location.state.landInfo)\r\n    this.state = {\r\n      particularLinkInfo: [],\r\n    };\r\n  }\r\n  componentDidMount = async () => {\r\n    console.log(this.props, \"Country By Code\");\r\n    const code = this.props.match.params.code;\r\n    const data = await fetch(`https://restcountries.eu/rest/v2/alpha/${code}`);\r\n    const wholeInfo = await data.json();\r\n    this.setState({ particularLinkInfo: [wholeInfo] });\r\n  };\r\n  fetchElementsAgain = async (border) => {\r\n    const data = await fetch(\r\n      `https://restcountries.eu/rest/v2/alpha/${border}`\r\n    );\r\n    const wholeInfo = await data.json();\r\n    this.setState({ particularLinkInfo: [wholeInfo] });\r\n  };\r\n  render() {\r\n    const getInfo = this.state.particularLinkInfo[0];\r\n    // console.log(getInfo, \"Country By Code\");\r\n    // console.log(this.state, \"Country By Code\");\r\n    return (\r\n      <div\r\n        className=\"container-fluid\"\r\n        style={{ backgroundColor: \"rgb(250,250,240)\" }}\r\n      >\r\n        {this.state.particularLinkInfo.length !== 0 && (\r\n          <div>\r\n            <img\r\n              src={getInfo.flag}\r\n              className=\"img-fluid text-center\"\r\n              style={{\r\n                width: \"90vw\",\r\n                margin: \"auto\",\r\n                display: \"block\",\r\n                height: \"80vh\",\r\n              }}\r\n              alt={getInfo.name}\r\n            />\r\n            <h1 style={{ textAlign: \"center\" }}>{getInfo.name}</h1>\r\n            <h4>Bordering Nations</h4>\r\n            {getInfo.borders.length !== 0 ? (\r\n              <>\r\n                {getInfo.borders.map((border, indexKey) => {\r\n                  return (\r\n                    <Link\r\n                      // to={`/countryName/${getInfo.name}`}\r\n                      to={{\r\n                        pathname: `/countryCode/${border}`,\r\n                        state: {\r\n                          landInfo: this.props.location.state.landInfo,\r\n                          populationInfo: this.props.location.state\r\n                            .populationInfo,\r\n                        },\r\n                      }}\r\n                      // to={`/countryCode/${border}`}\r\n                      key={indexKey}\r\n                      className=\"btn btn-outline-success mr-3 mb-2\"\r\n                      onClick={() => {\r\n                        this.fetchElementsAgain(border);\r\n                      }}\r\n                    >\r\n                      {border}\r\n                    </Link>\r\n                  );\r\n                })}{\" \"}\r\n              </>\r\n            ) : (\r\n              <h3>\"No Bordering Nation Present</h3>\r\n            )}\r\n\r\n            <hr />\r\n            <TabsInfo\r\n              tabsInfoPassed={getInfo}\r\n              landInfo={this.props.location.state.landInfo}\r\n              populationInfo={this.props.location.state.populationInfo}\r\n            />\r\n            <hr />\r\n            <Link to=\"/\" className=\"btn btn-outline-danger btn-lg mb-3\">\r\n              Go Back\r\n            </Link>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CountryByCode;\r\n","C:\\Users\\Sarvesh\\Desktop\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\Components\\TabsInfo.js",["86","87","88","89","90"],"import React, { useState, useEffect } from \"react\";\r\nimport { Tab, TabList, Tabs, TabPanel } from \"react-tabs\";\r\nimport \"react-tabs/style/react-tabs.css\";\r\nimport \"./TabsStyle.css\";\r\nimport { Pie, Line, Bar, Doughnut, Bubble } from \"react-chartjs-2\";\r\nimport Weather from \"./Weather\";\r\n\r\nconst TabsInfo = (props) => {\r\n  console.log(props);\r\n  const [pop, setPop] = useState(\"\");\r\n  const [worldPop, setWorldPop] = useState(\"\");\r\n  const [land, setLand] = useState(\"\");\r\n\r\n  const solutionPop = () => {\r\n    if (props.tabsInfoPassed.region === \"Asia\") {\r\n      setPop(props.populationInfo.AsiaPopulation);\r\n      setLand(props.landInfo.AsiaLand);\r\n    } else if (props.tabsInfoPassed.region === \"Europe\") {\r\n      setPop(props.populationInfo.EuropePopulation);\r\n      setLand(props.landInfo.EuropeLand);\r\n    } else if (props.tabsInfoPassed.region === \"Africa\") {\r\n      setPop(props.populationInfo.AfricaPopulation);\r\n      setLand(props.landInfo.AfricaLand);\r\n    } else if (props.tabsInfoPassed.region === \"Americas\") {\r\n      setPop(props.populationInfo.AmericasPopulation);\r\n      setLand(props.landInfo.AmericaLand);\r\n    } else if (props.tabsInfoPassed.region === \"Oceania\") {\r\n      setPop(props.populationInfo.OceaniaPopulation);\r\n      setLand(props.landInfo.OceaniaLand);\r\n    } else if (props.tabsInfoPassed.region === \"Polar\") {\r\n      setLand(props.populationInfo.Land);\r\n      setPop(props.populationInfo.PolarPopulation);\r\n    }\r\n  };\r\n  console.log(props.tabsInfoPassed.latlng[0]);\r\n  const latitude = props.tabsInfoPassed.latlng[0];\r\n  const longitude = props.tabsInfoPassed.latlng[1];\r\n  useEffect(() => {\r\n    solutionPop();\r\n    setWorldPop(props.populationInfo.WorldPopulation);\r\n  }, []);\r\n  // console.log(pop);\r\n  const numberWithCommas = (n) => {\r\n    n = n.toString();\r\n    var pattern = /(-?\\d+)(\\d{3})/;\r\n    while (pattern.test(n)) n = n.replace(pattern, \"$1,$2\");\r\n    return n;\r\n  };\r\n\r\n  const charDataPopulation = () => {\r\n    return {\r\n      labels: [props.tabsInfoPassed.region, props.tabsInfoPassed.name],\r\n      datasets: [\r\n        {\r\n          label: \"Population\",\r\n          data: [pop, props.tabsInfoPassed.population],\r\n          backgroundColor: [\r\n            \"rgba(54, 162, 235, 0.6)\",\r\n            \"rgba(255, 99, 132, 0.6)\",\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  };\r\n  const chardataLand = () => {\r\n    return {\r\n      labels: [props.tabsInfoPassed.region, props.tabsInfoPassed.name],\r\n      datasets: [\r\n        {\r\n          label: \"Land Distribution\",\r\n          data: [land, props.tabsInfoPassed.area],\r\n          backgroundColor: [\"rgba(235, 54, 226, 0.6)\", \"rgba(1, 7, 1, 0.753)\"],\r\n        },\r\n      ],\r\n    };\r\n  };\r\n  const completedData = () => {\r\n    const {\r\n      WorldPopulation,\r\n      AsiaPopulation,\r\n      AmericasPopulation,\r\n      EuropePopulation,\r\n      AfricaPopulation,\r\n      OceaniaPopulation,\r\n      PolarPopulation,\r\n    } = props.populationInfo;\r\n\r\n    return {\r\n      labels: [\"Asia\", \"Africa\", \"Australia\", \"Europe\", \"Americas\", \"Polar\"],\r\n      datasets: [\r\n        {\r\n          label: \"DemoGraphs For Land\",\r\n          data: [\r\n            AsiaPopulation,\r\n            AfricaPopulation,\r\n            OceaniaPopulation,\r\n            EuropePopulation,\r\n            AmericasPopulation,\r\n            PolarPopulation,\r\n          ],\r\n          backgroundColor: [\r\n            \"rgb(255, 98, 98)\",\r\n            \"rgb(255, 168, 38)\",\r\n            \"rgb(98, 255, 132)\",\r\n            \"rgb(250, 98, 255)\",\r\n            \"rgb(255, 245, 98)\",\r\n            \"rgb(131, 89, 0)\",\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  };\r\n  const completedDataLand = () => {\r\n    const {\r\n      AsiaLand,\r\n      AmericaLand,\r\n      EuropeLand,\r\n      AfricaLand,\r\n      OceaniaLand,\r\n      PolarLand,\r\n    } = props.landInfo;\r\n\r\n    return {\r\n      labels: [\"Asia\", \"America\", \"Europe\", \"Africa\", \"Australia\", \"Polar\"],\r\n      datasets: [\r\n        {\r\n          label: \"DemoGraphs For Land\",\r\n          data: [\r\n            AsiaLand,\r\n            AmericaLand,\r\n            EuropeLand,\r\n            AfricaLand,\r\n            OceaniaLand,\r\n            PolarLand,\r\n          ],\r\n          backgroundColor: [\r\n            \"rgb(0, 0, 0)\",\r\n            \"rgb(0, 132, 255)\",\r\n            \"rgb(255, 0, 157)\",\r\n            \"rgb(255, 72, 0)\",\r\n            \"rgb(0, 255, 55)\",\r\n            \"rgb(131, 89, 0)\",\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  };\r\n  const renderPosts = (\r\n    <Tabs\r\n      defaultIndex={1}\r\n      onSelect={(index) => console.log(index)}\r\n      style={{ minHeight: \"10vh\", marginBottom: \"100px\" }}\r\n    >\r\n      <TabList>\r\n        <Tab>\r\n          <h4>Languages</h4>\r\n        </Tab>\r\n        <Tab>\r\n          <h4>Population</h4>\r\n        </Tab>\r\n        <Tab>\r\n          <h4>Land Distribution</h4>\r\n        </Tab>\r\n        <Tab>\r\n          <h4>General-DemoGraphs</h4>\r\n        </Tab>\r\n        <Tab>\r\n          <h4>Weather Info</h4>\r\n        </Tab>\r\n      </TabList>\r\n      <TabPanel>\r\n        {props.tabsInfoPassed.languages.map((language, index) => {\r\n          return (\r\n            <h5 className=\"tabsHeading\" key={index}>\r\n              {language.name}\r\n            </h5>\r\n          );\r\n        })}\r\n      </TabPanel>\r\n      <TabPanel>\r\n        <h5 className=\"tabsHeading\">\r\n          {numberWithCommas(props.tabsInfoPassed.population)}\r\n        </h5>\r\n        {props.tabsInfoPassed.population < 50000 ? (\r\n          <Line\r\n            data={charDataPopulation()}\r\n            options={{\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n            }}\r\n          />\r\n        ) : (\r\n          <Pie\r\n            data={charDataPopulation()}\r\n            options={{\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n            }}\r\n          />\r\n        )}\r\n        <h4>\r\n          Population of {props.tabsInfoPassed.name} accounts about{\" \"}\r\n          <span className=\"information\">\r\n            {(props.tabsInfoPassed.population / pop).toFixed(4).toString()}\r\n          </span>{\" \"}\r\n          percentage of {props.tabsInfoPassed.region}\r\n        </h4>\r\n      </TabPanel>\r\n      <TabPanel>\r\n        <h5 className=\"tabsHeading\">\r\n          {numberWithCommas(props.tabsInfoPassed.area)}\r\n        </h5>\r\n        {props.tabsInfoPassed.area < 3000 ? (\r\n          <Line\r\n            data={chardataLand()}\r\n            options={{\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n            }}\r\n          />\r\n        ) : (\r\n          <Pie\r\n            data={chardataLand()}\r\n            options={{\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n            }}\r\n          />\r\n        )}\r\n        <h4>\r\n          Landarea Covered of {props.tabsInfoPassed.name} is about{\" \"}\r\n          <span className=\"information\">\r\n            {(props.tabsInfoPassed.area / land).toFixed(4).toString()}\r\n          </span>{\" \"}\r\n          percentage of {props.tabsInfoPassed.region}\r\n        </h4>\r\n      </TabPanel>\r\n      <TabPanel>\r\n        <h5>Population Spread on the Continents</h5>\r\n        <h6 style={{ textAlign: \"center\" }}>\r\n          Chart For Population Division\r\n          <Doughnut\r\n            data={completedData()}\r\n            options={{\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n            }}\r\n          />\r\n        </h6>\r\n        <hr />\r\n        <h5>Area Spread on the Continents</h5>\r\n        <h6 style={{ textAlign: \"center\" }}>\r\n          Chart of complete Area Division\r\n          <Pie\r\n            data={completedDataLand()}\r\n            options={{\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n            }}\r\n          />\r\n        </h6>\r\n        <hr />\r\n      </TabPanel>\r\n      <TabPanel>\r\n        <Weather latitude={latitude} longitude={longitude} />\r\n      </TabPanel>\r\n    </Tabs>\r\n  );\r\n  return <div>{renderPosts}</div>;\r\n};\r\nexport default TabsInfo;\r\n","C:\\Users\\Sarvesh\\Desktop\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\Components\\NavBar\\Navbar.js",[],"C:\\Users\\Sarvesh\\Desktop\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\Components\\Navbar\\Navbar.js",[],"C:\\Users\\Sarvesh\\Desktop\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\Components\\Region\\Asia.js",["91"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nfunction Asia(props) {\r\n  console.log(props.location.state.populationInfo);\r\n  console.log(props.location.state.landInfo);\r\n  console.log(props.match.params.regional);\r\n  const code = props.match.params.regional;\r\n  const [search, setSearch] = useState(\"\");\r\n  const [allCountryArray, setAllCountryArray] = useState([]);\r\n  const getChanged = (e) => {\r\n    setSearch(e.target.value);\r\n  };\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await fetch(\r\n        `https://restcountries.eu/rest/v2/region/${code}`\r\n      );\r\n      const jsonConv = await result.json();\r\n      const resp = await jsonConv;\r\n      setAllCountryArray(resp);\r\n    };\r\n    fetchData();\r\n    console.log(allCountryArray);\r\n  }, []);\r\n\r\n  const filteredCountries = allCountryArray.filter((country) => {\r\n    return country.name.toLowerCase().indexOf(search.toLowerCase()) !== -1;\r\n  });\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      {filteredCountries.length !== 0 ? (\r\n        <>\r\n          <h1 style={{ textAlign: \"center\" }}>{code}</h1>\r\n          <div className=\"input-group input-group-lg\">\r\n            <div className=\"input-group-prepend\">\r\n              <span className=\"input-group-text\" id=\"inputGroup-sizing-lg\">\r\n                Get Info\r\n              </span>\r\n            </div>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              aria-label=\"Large\"\r\n              aria-describedby=\"inputGroup-sizing-sm\"\r\n              placeholder=\"Enter Your Country Here\"\r\n              onChange={getChanged}\r\n            />\r\n          </div>\r\n          <div className=\"row\">\r\n            {filteredCountries.map(function (country, index) {\r\n              return (\r\n                <div\r\n                  key={index}\r\n                  className=\"col-md-4 col-12 col-sm-6 col-12 my-4\"\r\n                  style={{ width: \"10rem\", minHeight: \"100%\" }}\r\n                >\r\n                  <div\r\n                    className=\"card\"\r\n                    style={{\r\n                      width: \"100%\",\r\n                      height: \"100%\",\r\n                      backgroundColor: \"whitesmoke\",\r\n                      boxShadow: \"1px 2px 15px  rgba(0, 0, 0, 0.418)\",\r\n                    }}\r\n                  >\r\n                    <img\r\n                      className=\"card-img-top\"\r\n                      src={country.flag}\r\n                      alt={country.name}\r\n                      style={{ borderBottom: \"2px solid black\" }}\r\n                    />\r\n                    <div className=\"card-body\">\r\n                      <h3 className=\"card-title countryName\">{country.name}</h3>\r\n                      <h5 className=\"card-title\">\r\n                        <span style={{ color: \"red\", paddingRight: \"0.3rem\" }}>\r\n                          Native Name\r\n                        </span>\r\n                        {country.nativeName}\r\n                      </h5>\r\n                      <h5 className=\"card-title\">\r\n                        <span style={{ color: \"red\", paddingRight: \"0.5rem\" }}>\r\n                          Region\r\n                        </span>\r\n                        {country.region}\r\n                      </h5>\r\n                      <Link\r\n                        to={{\r\n                          pathname: `/countryName/${country.name}`,\r\n\r\n                          state: {\r\n                            countryInfo: country,\r\n                            populationInfo: props.location.state.populationInfo,\r\n                            landInfo: props.location.state.landInfo,\r\n                          },\r\n                        }}\r\n                        className=\"btn btn-primary\"\r\n                      >\r\n                        Fetch More Details\r\n                      </Link>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <Link to=\"/\" className=\"btn btn-outline-danger btn-lg\">\r\n            Go Back\r\n          </Link>\r\n        </>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Asia;\r\n","C:\\Users\\Sarvesh\\Desktop\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\Components\\ChartsExp.js",[],"C:\\Users\\Sarvesh\\Desktop\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\Components\\LandChart.js",[],["92","93"],"C:\\Users\\Sarvesh\\Desktop\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\Components\\TabsInfoByCode.js",[],"C:\\Users\\Sarvesh\\Desktop\\rest-countries-api-with-color-theme-switcher-master\\restc\\src\\Components\\Weather.js",["94","95"],"// import React, { Component } from \"react\";\r\n\r\n// export default class Weather extends Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n//   componentDidMount = async () => {\r\n//     const fecthData = await fetch(\r\n//       `api.openweathermap.org/data/2.5/weather?lat=${this.props.latitude}&lon=${this.props.longitude}&appid=${APIKEY}`\r\n//     );\r\n//     const response = await fecthData.json();\r\n//     console.log(response);\r\n//   };\r\n//   render() {\r\n//     return <div>{}</div>;\r\n//   }\r\n// }\r\nimport React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport \"./Weather.css\";\r\nconst APIKEY = `388053a21f6b02d9812861c21150602f`;\r\n\r\nconst Weather = ({ latitude, longitude }) => {\r\n  // console.log(latitude);\r\n  // console.log(longitude);\r\n  const [maxTemp, setMaxTemp] = useState(\"\");\r\n  const [minTemp, setMinTemp] = useState(\"\");\r\n  const [temp, setTemp] = useState(\"\");\r\n  const [sunrise, setSunrise] = useState(\"\");\r\n  const [sunset, setSunset] = useState(\"\");\r\n  const [humidity, setHumidity] = useState(\"\");\r\n  const [avgTemp, setAvgTemp] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [windSpeed, setWindSpeed] = useState(\"\");\r\n  const [winDeg, setWindDeg] = useState(\"\");\r\n  const [icon, setIcon] = useState(\"\");\r\n  const [main, setMain] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const getWeatherData = async () => {\r\n      const fetchDetails = await fetch(\r\n        `//api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${APIKEY}`\r\n      );\r\n\r\n      const data = await fetchDetails.json();\r\n      setMaxTemp(data.main.temp_max);\r\n      setMinTemp(data.main.temp_min);\r\n      setTemp(data.main.temp);\r\n      setAvgTemp(data.main.feels_like);\r\n      setHumidity(data.main.humidity);\r\n      setDescription(data.weather[0].description);\r\n      setIcon(data.weather[0].icon);\r\n      setMain(data.weather[0].main);\r\n      setSunrise(data.sys.sunrise);\r\n      setSunset(data.sys.sunset);\r\n      setWindDeg(data.wind.deg);\r\n      setWindSpeed(data.wind.speed);\r\n      console.log(data);\r\n    };\r\n    getWeatherData();\r\n  }, []);\r\n  const convertTime = (parameter) => {\r\n    const date = parameter * 1000;\r\n    const mDate = new Date(1609567497 * 1000).toString();\r\n    console.log(mDate);\r\n    const convDate = new Date(date).toString();\r\n    return convDate;\r\n  };\r\n  return (\r\n    <div>\r\n      <ul className=\"list-group weatherElements\">\r\n        <li className=\"list-group-item\">\r\n          <SpanHeadingTag>Temperature Info</SpanHeadingTag>\r\n          <li className=\"list-group-item\">\r\n            Maximum Temperture <SpanTag>{maxTemp} &deg;K</SpanTag>\r\n          </li>\r\n          <li className=\"list-group-item\">\r\n            Minimum Temperature <SpanTag>{minTemp} &deg;K</SpanTag>\r\n          </li>\r\n          <li className=\"list-group-item\">\r\n            Average Temperature <SpanTag>{avgTemp} &deg;K</SpanTag>\r\n          </li>\r\n          <li className=\"list-group-item\">\r\n            Scalable Temperature <SpanTag>{temp} &deg;K</SpanTag>\r\n          </li>\r\n        </li>\r\n        <li className=\"list-group-item\">\r\n          <SpanHeadingTag>Weather Information Card</SpanHeadingTag>\r\n          <li className=\"list-group-item\">\r\n            <img\r\n              src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\r\n              alt=\"image Weather\"\r\n            />\r\n            The Weather Today appears to be <SpanTag> {description} </SpanTag>\r\n            {\"\"}\r\n            with the temperature {\"\"}\r\n            <SpanTag> {temp}.</SpanTag>\r\n            In short it is <SpanTag>{main}</SpanTag>\r\n          </li>\r\n          <li className=\"list-group-item\">\r\n            Wind Blows at speed of <SpanTag>{windSpeed} </SpanTag> with the\r\n            degree of <SpanTag> {winDeg} </SpanTag>\r\n          </li>\r\n\r\n          <li className=\"list-group-item\">\r\n            Humidity in the area is <SpanTag> {humidity}</SpanTag>\r\n          </li>\r\n        </li>\r\n        <li className=\"list-group-item\">\r\n          <SpanHeadingTag>Sunrise and Sunset</SpanHeadingTag>\r\n          <li className=\"list-group-item\">\r\n            Sun will rise at <SpanTag>{convertTime(sunrise)} </SpanTag>\r\n          </li>\r\n          <li className=\"list-group-item\">\r\n            Sun will set at <SpanTag>{convertTime(sunset)}</SpanTag>\r\n          </li>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst SpanTag = styled.div`\r\n  display: inline-block;\r\n  font-size: 1.5rem;\r\n  color: red;\r\n  &:hover {\r\n    color: white;\r\n    background-color: red;\r\n    font-family: cursive;\r\n    cursor: pointer;\r\n  }\r\n`;\r\nconst SpanHeadingTag = styled.h2`\r\n  font-family: cursive;\r\n  color: red;\r\n  display: inline-block;\r\n  font-weight: 100;\r\n  transition: all 0.4s ease-in-out;\r\n  &:hover {\r\n    color: white;\r\n    background-color: red;\r\n    transform: skewY(-2deg);\r\n  }\r\n`;\r\nexport default Weather;\r\n",{"ruleId":"96","severity":1,"message":"97","line":3,"column":8,"nodeType":"98","messageId":"99","endLine":3,"endColumn":19},{"ruleId":"100","severity":1,"message":"101","line":12,"column":19,"nodeType":"102","endLine":17,"endColumn":21},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"103","replacedBy":"107"},{"ruleId":"105","replacedBy":"108"},{"ruleId":"96","severity":1,"message":"109","line":4,"column":8,"nodeType":"98","messageId":"99","endLine":4,"endColumn":22},{"ruleId":"96","severity":1,"message":"110","line":5,"column":21,"nodeType":"98","messageId":"99","endLine":5,"endColumn":24},{"ruleId":"96","severity":1,"message":"111","line":5,"column":36,"nodeType":"98","messageId":"99","endLine":5,"endColumn":42},{"ruleId":"96","severity":1,"message":"112","line":11,"column":10,"nodeType":"98","messageId":"99","endLine":11,"endColumn":18},{"ruleId":"113","severity":1,"message":"114","line":41,"column":6,"nodeType":"115","endLine":41,"endColumn":8,"suggestions":"116"},{"ruleId":"96","severity":1,"message":"117","line":79,"column":7,"nodeType":"98","messageId":"99","endLine":79,"endColumn":22},{"ruleId":"113","severity":1,"message":"118","line":24,"column":6,"nodeType":"115","endLine":24,"endColumn":8,"suggestions":"119"},{"ruleId":"103","replacedBy":"120"},{"ruleId":"105","replacedBy":"121"},{"ruleId":"113","severity":1,"message":"122","line":61,"column":6,"nodeType":"115","endLine":61,"endColumn":8,"suggestions":"123"},{"ruleId":"100","severity":1,"message":"101","line":90,"column":13,"nodeType":"102","endLine":93,"endColumn":15},"no-unused-vars","'EachCountry' is defined but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-native-reassign",["124"],"no-negated-in-lhs",["125"],["124"],["125"],"'TabsInfoByCode' is defined but never used.","'Bar' is defined but never used.","'Bubble' is defined but never used.","'worldPop' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.populationInfo.WorldPopulation' and 'solutionPop'. Either include them or remove the dependency array. If 'setWorldPop' needs the current value of 'props.populationInfo.WorldPopulation', you can also switch to useReducer instead of useState and read 'props.populationInfo.WorldPopulation' in the reducer.","ArrayExpression",["126"],"'WorldPopulation' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'allCountryArray' and 'code'. Either include them or remove the dependency array.",["127"],["124"],["125"],"React Hook useEffect has missing dependencies: 'latitude' and 'longitude'. Either include them or remove the dependency array.",["128"],"no-global-assign","no-unsafe-negation",{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},"Update the dependencies array to be: [props.populationInfo.WorldPopulation, solutionPop]",{"range":"135","text":"136"},"Update the dependencies array to be: [allCountryArray, code]",{"range":"137","text":"138"},"Update the dependencies array to be: [latitude, longitude]",{"range":"139","text":"140"},[1707,1709],"[props.populationInfo.WorldPopulation, solutionPop]",[828,830],"[allCountryArray, code]",[2150,2152],"[latitude, longitude]"]